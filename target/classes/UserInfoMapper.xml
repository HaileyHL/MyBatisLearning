<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 绑定mapper-->
<mapper namespace="com.hl.mapper.UserInfoMapper">
    <!-- resultType is simpler but less flexible.-->
    <!-- resultType name here is a typeAlias (instead of full name), configured in mybatis-config.xml. 后面也是-->
     <select id="selectUser0" resultType="UserInfo">
     select * from user_info where user_id = #{id}
     </select>

    <!--
    resultMap achieves mapping at this level.
    Although we achieve mapping at entity level, it might go wrong.
    resultMapping creates flexibility for naming in Entity level
    -->
    <!-- property为UserInfo字段，column为mySQL字段-->

    <resultMap id="userInfoResult" type="com.hl.po.UserInfo">
        <id property="userId" column="user_id"/>
        <result property="username" column="username"/>
        <result property="userPassword" column="user_password"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <select id="selectUserInfoById" resultType = "UserInfo">
        select * from user_info where user_id = #{id};  <!-- 主键-->
    </select>

    <select id = "selectAllUsers" resultType = "UserInfo">
        select * from user_info;
    </select>

    <insert id="insertUserInfo" parameterType="UserInfo">
    insert into user_info(username, user_password) values (#{username}, #{userPassword});
</insert>

    <update id="updateUsernameById">
        update user_info set username = #{name1} where user_id = #{id};
    </update>

    <delete id="deleteUserById">
        delete from user_info where user_id = #{id};
    </delete>

    <select id="queryUserInfoByUsernameAndPwd" resultType="UserInfo">
        select * from user_info where username = #{username} and user_password = #{password}
    </select>

    <!-- Dynamic Sql: avoids complex operations with MySql-->
    <select id="queryUserInfoByUsernameOrPwd" resultType="UserInfo" parameterType="UserInfo">
        SELECT * FROM user_info
        <where> <!-- reason for using where instead of sql WHERE here is to avoid the case where both if statements fail-->
            <if test="username != null and username != ''">  <!-- haven't done resultMap here so uses Java objects-->
                username = #{username}
            </if>
            <if test="userPassword != null and userPassword != ''">
                AND user_password = #{userPassword}
            </if>
        </where>
    </select>

    <!-- Same as the above but used for method 4.1. See po/Application-->
    <select id="queryUserInfoByParam" resultType="UserInfo" parameterType="UserInfo">
        SELECT * FROM user_info
        <where> <!-- reason for using where instead of sql WHERE here is to avoid the case where both if statements fail-->
            <if test="username != null and username != ''">  <!-- haven't done resultMap here so uses Java objects-->
                username = #{username}
            </if>
            <if test="userPassword != null and userPassword != ''">
                AND user_password = #{userPassword}
            </if>
        </where>
    </select>

    <!-- Limiting number items displayed-->
    <select id="selectUserInfoByPages" resultType="UserInfo">
        SELECT * FROM user_info limit #{pageIndex} , #{pageSize}
    </select>


</mapper>